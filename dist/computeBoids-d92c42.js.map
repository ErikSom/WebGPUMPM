{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/examples/computeBoids.ts","webpack:///./src/glslang.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","title","description","init","canvas","useWGSL","adapter","navigator","gpu","requestAdapter","device","requestDevice","glslang","swapChain","getContext","configureSwapChain","format","renderPipeline","createRenderPipeline","vertexStage","createShaderModule","code","glslShaders","vertex","transform","glsl","compileGLSL","entryPoint","fragmentStage","fragment","primitiveTopology","depthStencilState","depthWriteEnabled","depthCompare","vertexState","vertexBuffers","arrayStride","stepMode","attributes","shaderLocation","offset","colorStates","computePipeline","createComputePipeline","computeStage","wgslShaders","compute","renderPassDescriptor","colorAttachments","attachment","undefined","loadValue","g","b","a","depthStencilAttachment","createTexture","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","createView","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","vertexBufferData","Float32Array","verticesBuffer","createBuffer","byteLength","GPUBufferUsage","VERTEX","mappedAtCreation","getMappedRange","set","unmap","simParamData","simParamBuffer","UNIFORM","initialParticleData","numParticles","Math","random","particleBuffers","Array","particleBindGroups","STORAGE","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","buffer","getCurrentTexture","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","beginRenderPass","setVertexBuffer","draw","defaultQueue","submit","finish","glslangModule","import","default"],"mappings":"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","file":"computeBoids-d92c42.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","import glslangModule from '../glslang';\r\n\r\nexport const title = 'Compute Boids';\r\nexport const description = 'A GPU compute particle simulation that mimics \\\r\n                            the flocking behavior of birds. A compute shader updates \\\r\n                            two ping-pong buffers which store particle data. The data \\\r\n                            is used to draw instanced particles.';\r\n\r\nexport async function init(canvas: HTMLCanvasElement, useWGSL: boolean) {\r\n  const numParticles = 1500;\r\n\r\n  const adapter = await navigator.gpu.requestAdapter();\r\n  const device = await adapter.requestDevice();\r\n  const glslang = await glslangModule();\r\n\r\n  const context = canvas.getContext('gpupresent');\r\n  \r\n  const swapChain = context.configureSwapChain({\r\n    device,\r\n    format: \"bgra8unorm\"\r\n  });\r\n\r\n  const renderPipeline = device.createRenderPipeline({\r\n    vertexStage: {\r\n      module: \r\n        device.createShaderModule({\r\n          code: glslShaders.vertex,\r\n          transform: (glsl) => glslang.compileGLSL(glsl, \"vertex\"),\r\n        }),\r\n      entryPoint: \"main\",\r\n    },\r\n    fragmentStage: {\r\n      module: \r\n      device.createShaderModule({\r\n          code: glslShaders.fragment,\r\n          transform: (glsl) => glslang.compileGLSL(glsl, \"fragment\"),\r\n        }),\r\n      entryPoint: \"main\",\r\n    },\r\n\r\n    primitiveTopology: \"point-list\",\r\n\r\n    depthStencilState: {\r\n      depthWriteEnabled: true,\r\n      depthCompare: \"less\",\r\n      format: \"depth24plus-stencil8\",\r\n    },\r\n\r\n    vertexState: {\r\n      vertexBuffers: [\r\n        {\r\n          // instanced particles buffer\r\n          arrayStride: 4 * 4,\r\n          stepMode: \"instance\",\r\n          attributes: [\r\n            {\r\n              // instance position\r\n              shaderLocation: 0,\r\n              offset: 0,\r\n              format: \"float2\",\r\n            },\r\n            {\r\n              // instance velocity\r\n              shaderLocation: 1,\r\n              offset: 2 * 4,\r\n              format: \"float2\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          // vertex buffer\r\n          arrayStride: 2 * 4,\r\n          stepMode: \"vertex\",\r\n          attributes: [\r\n            {\r\n              // vertex positions\r\n              shaderLocation: 2,\r\n              offset: 0,\r\n              format: \"float2\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n\r\n    colorStates: [\r\n      {\r\n        format: \"bgra8unorm\",\r\n      },\r\n    ],\r\n  });\r\n\r\n  const computePipeline = device.createComputePipeline({\r\n    computeStage: {\r\n      module: useWGSL\r\n        ? device.createShaderModule({\r\n            code: wgslShaders.compute(numParticles),\r\n          })\r\n        : device.createShaderModule({\r\n            code: glslShaders.compute(numParticles),\r\n            transform: (glsl) => glslang.compileGLSL(glsl, \"compute\"),\r\n          }),\r\n      entryPoint: \"main\",\r\n    },\r\n  });\r\n\r\n  const depthTexture = device.createTexture({\r\n    size: { width: canvas.width, height: canvas.height, depth: 1 },\r\n    format: \"depth24plus-stencil8\",\r\n    usage: GPUTextureUsage.OUTPUT_ATTACHMENT\r\n  });\r\n\r\n  const renderPassDescriptor: GPURenderPassDescriptor = {\r\n    colorAttachments: [{\r\n      attachment: undefined,  // Assigned later\r\n      loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\r\n    }],\r\n    depthStencilAttachment: {\r\n      attachment: depthTexture.createView(),\r\n      depthLoadValue: 1.0,\r\n      depthStoreOp: \"store\",\r\n      stencilLoadValue: 0,\r\n      stencilStoreOp: \"store\",\r\n    }\r\n  };\r\n\r\n  const vertexBufferData = new Float32Array([-0.01, -0.02, 0.01, -0.02, 0.00, 0.02]);\r\n  const verticesBuffer = device.createBuffer({\r\n    size: vertexBufferData.byteLength,\r\n    usage: GPUBufferUsage.VERTEX,\r\n    mappedAtCreation: true,\r\n  });\r\n  new Float32Array(verticesBuffer.getMappedRange()).set(vertexBufferData);\r\n  verticesBuffer.unmap();\r\n\r\n  const simParamData = new Float32Array([\r\n    0.04,  // deltaT;\r\n    0.1,   // rule1Distance;\r\n    0.025, // rule2Distance;\r\n    0.025, // rule3Distance;\r\n    0.02,  // rule1Scale;\r\n    0.05,  // rule2Scale;\r\n    0.005  // rule3Scale;\r\n  ]);\r\n  const simParamBuffer = device.createBuffer({\r\n    size: simParamData.byteLength,\r\n    usage: GPUBufferUsage.UNIFORM,\r\n    mappedAtCreation: true,\r\n  });\r\n  new Float32Array(simParamBuffer.getMappedRange()).set(simParamData);\r\n  simParamBuffer.unmap();\r\n\r\n  const initialParticleData = new Float32Array(numParticles * 4);\r\n  for (let i = 0; i < numParticles; ++i) {\r\n    initialParticleData[4 * i + 0] = 2 * (Math.random() - 0.5);\r\n    initialParticleData[4 * i + 1] = 2 * (Math.random() - 0.5);\r\n    initialParticleData[4 * i + 2] = 2 * (Math.random() - 0.5) * 0.1;\r\n    initialParticleData[4 * i + 3] = 2 * (Math.random() - 0.5) * 0.1;\r\n  }\r\n\r\n  const particleBuffers: GPUBuffer[] = new Array(2);\r\n  const particleBindGroups: GPUBindGroup[] = new Array(2);\r\n  for (let i = 0; i < 2; ++i) {\r\n    particleBuffers[i] = device.createBuffer({\r\n      size: initialParticleData.byteLength,\r\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE,\r\n      mappedAtCreation: true,\r\n    });\r\n    new Float32Array(particleBuffers[i].getMappedRange()).set(initialParticleData);\r\n    particleBuffers[i].unmap();\r\n  }\r\n\r\n  for (let i = 0; i < 2; ++i) {\r\n    particleBindGroups[i] = device.createBindGroup({\r\n      layout: computePipeline.getBindGroupLayout(0),\r\n      entries: [{\r\n        binding: 0,\r\n        resource: {\r\n          buffer: simParamBuffer,\r\n          offset: 0,\r\n          size: simParamData.byteLength\r\n        },\r\n      }, {\r\n        binding: 1,\r\n        resource: {\r\n          buffer: particleBuffers[i],\r\n          offset: 0,\r\n          size: initialParticleData.byteLength,\r\n        },\r\n      }, {\r\n        binding: 2,\r\n        resource: {\r\n          buffer: particleBuffers[(i + 1) % 2],\r\n          offset: 0,\r\n          size: initialParticleData.byteLength,\r\n        },\r\n      }],\r\n    });\r\n  }\r\n\r\n  let t = 0;\r\n  return function frame() {\r\n    renderPassDescriptor.colorAttachments[0].attachment = swapChain.getCurrentTexture().createView();\r\n\r\n    const commandEncoder = device.createCommandEncoder();\r\n    {\r\n      const passEncoder = commandEncoder.beginComputePass();\r\n      passEncoder.setPipeline(computePipeline);\r\n      passEncoder.setBindGroup(0, particleBindGroups[t % 2]);\r\n      passEncoder.dispatch(numParticles);\r\n      passEncoder.endPass();\r\n    }\r\n    {\r\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\r\n      passEncoder.setPipeline(renderPipeline);\r\n      passEncoder.setVertexBuffer(0, particleBuffers[(t + 1) % 2]);\r\n      passEncoder.setVertexBuffer(1, verticesBuffer);\r\n      passEncoder.draw(3, numParticles, 0, 0);\r\n      passEncoder.endPass();\r\n    }\r\n    device.defaultQueue.submit([commandEncoder.finish()]);\r\n\r\n    ++t;\r\n  }\r\n}\r\n\r\nexport const glslShaders = {\r\n  vertex: `#version 450\r\nlayout(location = 0) in vec2 a_particlePos;\r\nlayout(location = 1) in vec2 a_particleVel;\r\nlayout(location = 2) in vec2 a_pos;\r\nvoid main() {\r\n  float angle = -atan(a_particleVel.x, a_particleVel.y);\r\n  vec2 pos = vec2(a_pos.x * cos(angle) - a_pos.y * sin(angle),\r\n          a_pos.x * sin(angle) + a_pos.y * cos(angle));\r\n  gl_Position = vec4(pos + a_particlePos, 0, 1);\r\n}`,\r\n\r\n  fragment: `#version 450\r\nlayout(location = 0) out vec4 fragColor;\r\nvoid main() {\r\n  fragColor = vec4(1.0);\r\n}`,\r\n\r\n  compute: (numParticles: number) => `#version 450\r\nstruct Particle {\r\n  vec2 pos;\r\n  vec2 vel;\r\n};\r\n\r\nlayout(std140, set = 0, binding = 0) uniform SimParams {\r\n  float deltaT;\r\n  float rule1Distance;\r\n  float rule2Distance;\r\n  float rule3Distance;\r\n  float rule1Scale;\r\n  float rule2Scale;\r\n  float rule3Scale;\r\n} params;\r\n\r\nlayout(std140, set = 0, binding = 1) buffer ParticlesA {\r\n  Particle particles[${numParticles} /* numParticles */];\r\n} particlesA;\r\n\r\nlayout(std140, set = 0, binding = 2) buffer ParticlesB {\r\n  Particle particles[${numParticles} /* numParticles */];\r\n} particlesB;\r\n\r\nvoid main() {\r\n  // https://github.com/austinEng/Project6-Vulkan-Flocking/blob/master/data/shaders/computeparticles/particle.comp\r\n\r\n  uint index = gl_GlobalInvocationID.x;\r\n  if (index >= ${numParticles} /* numParticles */) { return; }\r\n\r\n  vec2 vPos = particlesA.particles[index].pos;\r\n  vec2 vVel = particlesA.particles[index].vel;\r\n\r\n  vec2 cMass = vec2(0.0, 0.0);\r\n  vec2 cVel = vec2(0.0, 0.0);\r\n  vec2 colVel = vec2(0.0, 0.0);\r\n  int cMassCount = 0;\r\n  int cVelCount = 0;\r\n\r\n  vec2 pos;\r\n  vec2 vel;\r\n  for (int i = 0; i < ${numParticles} /* numParticles */; ++i) {\r\n    if (i == index) { continue; }\r\n    pos = particlesA.particles[i].pos.xy;\r\n    vel = particlesA.particles[i].vel.xy;\r\n\r\n    if (distance(pos, vPos) < params.rule1Distance) {\r\n      cMass += pos;\r\n      cMassCount++;\r\n    }\r\n    if (distance(pos, vPos) < params.rule2Distance) {\r\n      colVel -= (pos - vPos);\r\n    }\r\n    if (distance(pos, vPos) < params.rule3Distance) {\r\n      cVel += vel;\r\n      cVelCount++;\r\n    }\r\n  }\r\n  if (cMassCount > 0) {\r\n    cMass = cMass / cMassCount - vPos;\r\n  }\r\n  if (cVelCount > 0) {\r\n    cVel = cVel / cVelCount;\r\n  }\r\n\r\n  vVel += cMass * params.rule1Scale + colVel * params.rule2Scale + cVel * params.rule3Scale;\r\n\r\n  // clamp velocity for a more pleasing simulation.\r\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);\r\n\r\n  // kinematic update\r\n  vPos += vVel * params.deltaT;\r\n\r\n  // Wrap around boundary\r\n  if (vPos.x < -1.0) vPos.x = 1.0;\r\n  if (vPos.x > 1.0) vPos.x = -1.0;\r\n  if (vPos.y < -1.0) vPos.y = 1.0;\r\n  if (vPos.y > 1.0) vPos.y = -1.0;\r\n\r\n  particlesB.particles[index].pos = vPos;\r\n\r\n  // Write back\r\n  particlesB.particles[index].vel = vVel;\r\n}`,\r\n};\r\n\r\nexport const wgslShaders = {\r\n  vertex: `\r\n[[location(0)]] var<in> a_particlePos : vec2<f32>;\r\n[[location(1)]] var<in> a_particleVel : vec2<f32>;\r\n[[location(2)]] var<in> a_pos : vec2<f32>;\r\n[[builtin(position)]] var<out> Position : vec4<f32>;\r\n\r\n[[stage(vertex)]]\r\nfn main() -> void {\r\n  var angle : f32 = -atan2(a_particleVel.x, a_particleVel.y);\r\n  var pos : vec2<f32> = vec2<f32>(\r\n      (a_pos.x * cos(angle)) - (a_pos.y * sin(angle)),\r\n      (a_pos.x * sin(angle)) + (a_pos.y * cos(angle)));\r\n  Position = vec4<f32>(pos + a_particlePos, 0.0, 1.0);\r\n  return;\r\n}\r\n`,\r\n\r\n  fragment: `\r\n[[location(0)]] var<out> fragColor : vec4<f32>;\r\n\r\n[[stage(fragment)]]\r\nfn main() -> void {\r\n  fragColor = vec4<f32>(1.0, 1.0, 1.0, 1.0);\r\n  return;\r\n}\r\n`,\r\n\r\n  compute: (numParticles: number) => `\r\n[[block]] struct Particle {\r\n  [[offset(0)]] pos : vec2<f32>;\r\n  [[offset(8)]] vel : vec2<f32>;\r\n};\r\n[[block]] struct SimParams {\r\n  [[offset(0)]] deltaT : f32;\r\n  [[offset(4)]] rule1Distance : f32;\r\n  [[offset(8)]] rule2Distance : f32;\r\n  [[offset(12)]] rule3Distance : f32;\r\n  [[offset(16)]] rule1Scale : f32;\r\n  [[offset(20)]] rule2Scale : f32;\r\n  [[offset(24)]] rule3Scale : f32;\r\n};\r\n[[block]] struct Particles {\r\n  [[offset(0)]] particles : [[stride(16)]] array<Particle, ${numParticles}>;\r\n};\r\n[[binding(0), set(0)]] var<uniform> params : SimParams;\r\n[[binding(1), set(0)]] var<storage_buffer> particlesA : Particles;\r\n[[binding(2), set(0)]] var<storage_buffer> particlesB : Particles;\r\n[[builtin(global_invocation_id)]] var<in> GlobalInvocationID : vec3<u32>;\r\n\r\n# https://github.com/austinEng/Project6-Vulkan-Flocking/blob/master/data/shaders/computeparticles/particle.comp\r\n[[stage(compute)]]\r\nfn main() -> void {\r\n  var index : u32 = GlobalInvocationID.x;\r\n  if (index >= ${numParticles}) {\r\n    return;\r\n  }\r\n  var vPos : vec2<f32> = particlesA.particles[index].pos;\r\n  var vVel : vec2<f32> = particlesA.particles[index].vel;\r\n  var cMass : vec2<f32> = vec2<f32>(0.0, 0.0);\r\n  var cVel : vec2<f32> = vec2<f32>(0.0, 0.0);\r\n  var colVel : vec2<f32> = vec2<f32>(0.0, 0.0);\r\n  var cMassCount : u32 = 0u;\r\n  var cVelCount : u32 = 0u;\r\n  var pos : vec2<f32>;\r\n  var vel : vec2<f32>;\r\n\r\n  for (var i : u32 = 0u; i < ${numParticles}u; i = i + 1u) {\r\n    if (i == index) {\r\n      continue;\r\n    }\r\n\r\n    pos = particlesA.particles[i].pos.xy;\r\n    vel = particlesA.particles[i].vel.xy;\r\n    if (distance(pos, vPos) < params.rule1Distance) {\r\n      cMass = cMass + pos;\r\n      cMassCount = cMassCount + 1u;\r\n    }\r\n    if (distance(pos, vPos) < params.rule2Distance) {\r\n      colVel = colVel - (pos - vPos);\r\n    }\r\n    if (distance(pos, vPos) < params.rule3Distance) {\r\n      cVel = cVel + vel;\r\n      cVelCount = cVelCount + 1u;\r\n    }\r\n  }\r\n  if (cMassCount > 0u) {\r\n    var temp : f32 = f32(cMassCount);\r\n    cMass = (cMass / vec2<f32>(temp, temp)) - vPos;\r\n    # cMass =\r\n    #   (cMass / vec2<f32>(f32(cMassCount), f32(cMassCount))) - vPos;\r\n  }\r\n  if (cVelCount > 0u) {\r\n    var temp : f32 = f32(cVelCount);\r\n    cVel = cVel / vec2<f32>(temp, temp);\r\n    # cVel = cVel / vec2<f32>(f32(cVelCount), f32(cVelCount));\r\n  }\r\n  vVel = vVel + (cMass * params.rule1Scale) + (colVel * params.rule2Scale) +\r\n      (cVel * params.rule3Scale);\r\n\r\n  # clamp velocity for a more pleasing simulation\r\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);\r\n  # kinematic update\r\n  vPos = vPos + (vVel * params.deltaT);\r\n  # Wrap around boundary\r\n  if (vPos.x < -1.0) {\r\n    vPos.x = 1.0;\r\n  }\r\n  if (vPos.x > 1.0) {\r\n    vPos.x = -1.0;\r\n  }\r\n  if (vPos.y < -1.0) {\r\n    vPos.y = 1.0;\r\n  }\r\n  if (vPos.y > 1.0) {\r\n    vPos.y = -1.0;\r\n  }\r\n  # Write back\r\n  particlesB.particles[index].pos = vPos;\r\n  particlesB.particles[index].vel = vVel;\r\n  return;\r\n}\r\n`,\r\n};\r\n","let glslang = undefined;\r\nexport default async function() {\r\n  if (glslang !== undefined) return glslang;\r\n  // @ts-ignore\r\n  const glslangModule = await import(/* webpackIgnore: true */ 'https://unpkg.com/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js');\r\n  glslang = await glslangModule.default();\r\n  return glslang;\r\n}\r\n"],"sourceRoot":""}